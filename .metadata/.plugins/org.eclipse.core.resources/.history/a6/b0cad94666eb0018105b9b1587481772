package mvc.calc.controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import mvc.calc.model.JShellModel;

/**
 * @author Wojtek Rokicki
 * @version Alpha
 * Klasa <code>MainController</code>  implementujaca kontroler glownego okna aplikacji w modelu MVC (Model-View-Controller).
 * Klasa zostala automatycznie wygenerowana przez program Scene Builder.
 */

public class MainController {
	
	/**
	 * Utworzenie obiektu klasy <code>JShellModel</code>, ktory bedzie pomocny przy obliczeniach.
	 * @see mvc.calc.model.JShellModel
	 */
	JShellModel jshell = new JShellModel();
	/**
	 * Utworzenie obiektu klasy <code>Alert</code>, ktory bedzie pomocny przy wyswietlaniu uwag i bledow.
	 * @see <a href="https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/Alert.html">Klasa Alert</a>
	 */
	Alert alert = new Alert(AlertType.WARNING, "Wpisz poprawne dane.", ButtonType.OK);

	@FXML
	private Button factorial;

	@FXML
	private Button squareroot;

	@FXML
	private Button power;

	@FXML
	private Button module;

	@FXML
	private Button cancelall;

	@FXML
	private Button cancel;

	@FXML
	private Button backspace;

	@FXML
	private Button divide;

	@FXML
	private Button seven;

	@FXML
	private Button eight;

	@FXML
	private Button nine;

	@FXML
	private Button multiply;

	@FXML
	private Button four;

	@FXML
	private Button five;

	@FXML
	private Button six;

	@FXML
	private Button minus;

	@FXML
	private Button one;

	@FXML
	private Button two;

	@FXML
	private Button three;

	@FXML
	private Button plus;

	@FXML
	private Button negative;

	@FXML
	private Button zero;

	@FXML
	private Button dott;

	@FXML
	private Button equal;

	@FXML
	private TextField textfield;

	/**
	 * Metoda <code>Backspace_action()</code> obsluguje przycisk kalkulatora usuwajacy ostatnio wpisany znak.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Backspace_action(ActionEvent event) {
		if (textfield.getText().length() > 1)
			textfield.deleteText((textfield.getText().length()) - 1, textfield.getText().length());
		else
			textfield.setText("0");
	}

	/**
	 * Metoda <code>Cancel_action()</code> usuwa zawartosc okienka kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Cancel_action(ActionEvent event) {
		textfield.setText("0");
	}

	/**
	 * Metoda <code>Divide_action()</code> dodaje znak dzielenia w okienku kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Divide_action(ActionEvent event) {
		textfield.appendText("/");
	}

	/**
	 * Metoda <code>Dott_action()</code> dodaje znak kropki w okienku kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Dott_action(ActionEvent event) {
		textfield.appendText(".");
	}

	/**
	 * Metoda <code>Equal_action()</code> wykonuje dzialanie widoczne w okienku kalkulatora, zwraca wynik do okienka.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Equal_action(ActionEvent event) {
		if (jshell.jShellCalculation(textfield.getText()) != null)
			textfield.setText(jshell.jShellCalculation(textfield.getText()));

	}

	/**
	 * Metoda <code>Factorial_action()</code> przekazuje wynik dzialania metody <code>factorialFunction()</code> do okienka kalkulatora, sprawdza poprawnosc jej wykonania.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 * @see #factorialFunction() Funkcja factorialFunction()
	 */
	@FXML
	void Factorial_action(ActionEvent event) {
		if (!(factorialFunction().equals("0")))
			textfield.setText(factorialFunction());
		// System.out.println(jshell.jShellCalculation(textfield.getText()));
	}

	/**
	 * Metoda <code>Minus_action()</code> dodaje znak odejmowania w okienku kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Minus_action(ActionEvent event) {
		if (textfield.getText().equals("0"))
			textfield.setText("-");
		else
			textfield.appendText("-");
	}

	/**
	 * Metoda <code>Module_action()</code> wypisuje modul aktualnej liczby w okienku kalkulatora.
	 * Musi byc to poprawna liczba, a nie dzialanie (nie moze zawierac operatorow). W przeciwnym wypadku wyswietla <code>Alert</code>.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Module_action(ActionEvent event) {
		try {
			if (Double.parseDouble(textfield.getText()) < 0)
				textfield.deleteText(0, 1);
		} catch (NumberFormatException e) {
			alert.setTitle("Uwaga!");
			alert.setHeaderText("Nie mozna obliczyc modulu - Nieprawidlowe dane.");
			alert.showAndWait();
		}
	}

	/**
	 * Metoda <code>Multiply_action()</code> dodaje znak mnozenia w okienku kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Multiply_action(ActionEvent event) {
		textfield.appendText("*");
	}

	/**
	 * Metoda <code>Negative_action()</code> wypisuje przeciwna liczbe aktualnej liczby w okienku kalkulatora.
	 * Musi byc to poprawna liczba, a nie dzialanie (nie moze zawierac operatorow). W przeciwnym wypadku wyswietla <code>Alert</code>.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Negative_action(ActionEvent event) {
		try {
			if (Double.parseDouble(textfield.getText()) > 0)
				textfield.insertText(0, "-");
			else if (Double.parseDouble(textfield.getText()) < 0)
				textfield.deleteText(0, 1);
		} catch (NumberFormatException e) {
			alert.setTitle("Uwaga!");
			alert.setHeaderText("Nieprawidlowe dane.");
			alert.showAndWait();
		}
	}

	/**
	 * Metoda <code>Number_action()</code> wstawiajaca cyfre do okienka kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Number_action(ActionEvent event) {

		if (textfield.getText().equals("0"))
			textfield.setText(((Button) event.getSource()).getText());
		else
			textfield.appendText(((Button) event.getSource()).getText());
	}

	/**
	 * Metoda <code>Plus_action()</code> dodaje znak dodawania w okienku kalkulatora.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Plus_action(ActionEvent event) {
		textfield.appendText("+");
	}

	/**
	 * Metoda <code>Power_action()</code> dodajaca odpowiednie polecenie do okna kalkulatora, tak aby jshell mogl wykonac operacje potegowania.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Power_action(ActionEvent event) {
		if (!(textfield.getText().equals("0")))
			textfield.setText("Math.pow(" + textfield.getText() + ", 2)");
	}

	/**
	 * Metoda <code>Square_Root_action()</code> dodajaca odpowiednie polecenie do okna kalkulatora, tak aby jshell mogl wykonac operacje pierwiastkowania..
	 * Metoda zwraca blad w przypadku ujemnej badz nieprawidlowej liczby.
	 * @param event Obiekt na rzecz ktorego mialo miejsce zdarzenia w tym przypadku klikniecie na przycisk
	 */
	@FXML
	void Square_Root_action(ActionEvent event) {
		try {
			if (Double.parseDouble(jshell.jShellCalculation(textfield.getText())) > 0)
				textfield.setText("Math.sqrt(" + textfield.getText() + ")");
			else {
				alert.setTitle("Uwaga!");
				alert.setHeaderText("Liczba nie jest dodatnia - Nieprawidlowe dane.");
				alert.showAndWait();
			}
		} catch (NumberFormatException e) {
			alert.setTitle("Uwaga!");
			alert.setHeaderText("Liczba nie jest zmiennoprzecinkowa - Nieprawidlowe dane.");
			alert.showAndWait();
		}
	}

	/**
	 * Metoda <code>factorialFunction()</code> implementuje algorytm silni, korzysta z funkcji <code>isPositiveInteger()</code>.
	 * @return zwraca wynik silni w postaci lancucha znakow
	 * @see #isPositiveInteger() Funkcja isPositiveInteger()
	 */
	String factorialFunction() {
		if (isPositiveInteger()) {
			int out = 1;
			for (int i = 1; i <= Integer.parseInt(jshell.jShellCalculation(textfield.getText())); i++) {
				out = out * i;
			}
			return Integer.toString(out);
		}
		return "0";
	}

	/**
	 * Metoda <code>isPositiveInteger()</code> sprawdza czy tekst w oknie kalkulatora jest dodatnia liczba naturalna.
	 * W przypadku niepowodzenia zwraca <code>Alert</code>
	 * @return prawda lub falsz
	 */
	boolean isPositiveInteger() {
		try {
			int number = Integer.parseInt(jshell.jShellCalculation(textfield.getText()));
			if (number > 0)
				return true;
			else {
				alert.setTitle("Uwaga!");
				alert.setHeaderText("Liczba nie jest dodatnia - Nieprawidlowe dane.");
				alert.showAndWait();
				return false;
			}
		} catch (NumberFormatException e) {
			alert.setTitle("Uwaga!");
			alert.setHeaderText("Liczba nie jest naturalna - Nieprawidlowe dane.");
			alert.showAndWait();
			return false;
		}
	}
}
